@startuml

abstract class Deplacable{
+dx : int
+dy : int
+getX() : int
+getY() : int
+etrePresent(dx : int, dy : int) : boolean
+deplacer(dx : int, dy : int)
+{abstract}collision(objet : Deplacable)
}

class Perso{
+Perso(dx : int, dy : int)
+infligerDegats(v : Vivant)
}

class Monstre{
+Monstre(dx : int, dy : int)
+infligerDegats(v : Vivant)
}

abstract class Vivant{
+subirDegats(degats : int)
+collision(objet : Deplacable)
}

interface Victime {
+subirDegats(degats : int)
}

interface Attaque {
+infligerDegats(v : Vivant)
}

class Fleche {
+collision(objet : Deplacable)
}

Deplacable <|-- Fleche
Deplacable <|-- Vivant
Perso --|> Vivant
Monstre --|> Vivant
Vivant ..|> Victime
Vivant ..|> Attaque
Fleche ..|> Attaque
@enduml